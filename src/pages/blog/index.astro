---
import { getCollection } from "astro:content";
import Parser from "rss-parser";
import Base from "../../layouts/Base.astro";
import LinkItem from "../../components/LinkItem.astro";

const parser = new Parser();
const zenn_feed = await parser.parseURL("https://zenn.dev/wagomu/feed?all=1");
type Post = {
	slug: string;
	kind: "zenn" | "blog";
	data: {
		title: string;
		pubDate: Date;
	};
};
const zenn_posts: Post[] = zenn_feed.items.map((item) => ({
	slug: item.link || "",
	kind: "zenn",
	data: {
		title: item.title || "",
		pubDate: new Date(item.pubDate as string),
	},
}));

const blog_posts: Post[] = (
	await getCollection("blog", ({ data }) => {
		return data.published;
	})
).map((post) => ({
	slug: `/blog/${post.slug}`,
	kind: "blog",
	data: {
		title: post.data.title,
		pubDate: new Date(post.data.pubDate),
	},
}));

const posts = [...zenn_posts, ...blog_posts].sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

let currentYear: number = 0;
---

<Base>
	<div class="bloglist">
		{
			posts.map((post, _) => {
				const postYear = post.data.pubDate.getFullYear();
				const isNewYear = currentYear !== postYear;
				currentYear = postYear;
				return (
					<>
						{isNewYear && (
							<div class="header">
								<h2 class="date">{postYear}</h2>
								<div class="content">
									{posts.filter((p) => p.data.pubDate.getFullYear() === postYear).length} posts
								</div>
							</div>
						)}
						<LinkItem
							slug={post.slug}
							pubDate={post.data.pubDate}
							title={post.data.title}
							kind={post.kind}
						/>
					</>
				);
			})
		}
	</div>
</Base>

<style>
	.header {
		display: flex;
		align-items: center;
		gap: var(--space-xs);
		border-bottom: 2px solid var(--accent1);

		h2 {
			color: var(--accent1);
			font-size: 2rem;
			line-height: 2.5rem;
			font-weight: bold;
		}
	}

	.bloglist {
		display: flex;
		flex-direction: column;
		gap: var(--space-xs);
	}
</style>
