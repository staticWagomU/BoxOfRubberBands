---
import Base from "./Base.astro";
import { getCollection } from "astro:content";

import "../styles/blog.css";
const { post } = Astro.props;
const { pubDate } = post.data;
const formattedDate = pubDate.toLocaleDateString("ja-JP", {
	year: "numeric",
	month: "short",
	day: "numeric",
	weekday: "short",
});
const { id } = post;
const parts = id.split("/");
const year = parts[0];
const month = parts[1];
const filename = parts[2].replace(".mdx", "");
const ogImage = `${import.meta.env.SITE}/daily/${year}/${month}/${filename}.png`;

// Get previous and next posts for navigation
const allPosts = await getCollection("daily");
const sortedPosts = allPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const currentIndex = sortedPosts.findIndex((p) => p.id === post.id);
const prevPost = currentIndex < sortedPosts.length - 1 ? sortedPosts[currentIndex + 1] : null;
const nextPost = currentIndex > 0 ? sortedPosts[currentIndex - 1] : null;

// Create URLs for navigation links
const getPostUrl = (post) => {
	if (!post) return null;
	const postParts = post.id.split("/");
	return `/daily/${postParts[0]}/${postParts[1]}/${postParts[2].replace(".mdx", "")}`;
};

const prevUrl = prevPost ? getPostUrl(prevPost) : null;
const nextUrl = nextPost ? getPostUrl(nextPost) : null;
---

<Fragment slot="head">
	<meta name="robots" content="noindex" />
	<meta name="googlebot" content="noindex" />
	<meta property="og:title" content={`${formattedDate}の日記`} />
	<meta property="og:description" content="輪ごむの日記です。" />
	<meta property="og:image" content={ogImage} />
	<meta name="twitter:image" content={ogImage} />
</Fragment>

<Base title={`${formattedDate}の日記`}>
	<div id="progress" role="progressbar" aria-label="読進捗" aria-valuemin="0" aria-valuemax="100">
	</div>
	<article class="blog" role="article">
		<h1><time datetime={pubDate}>{formattedDate}</time>の日記</h1>
		<slot />
	</article>

	<nav class="daily-nav" role="navigation" aria-label="日記ナビゲーション">
		<div class="nav-links">
			{
				prevUrl && (
					<a href={prevUrl} class="nav-link prev" aria-label="前の日記へ移動">
						前の日記
					</a>
				)
			}
			{
				nextUrl && (
					<a href={nextUrl} class="nav-link next" aria-label="次の日記へ移動">
						次の日記
					</a>
				)
			}
		</div>
	</nav>
</Base>

<style>
	@keyframes grow-progress {
		from {
			width: 0;
		}
		to {
			width: 100%;
		}
	}

	#progress {
		/* スタイリング */
		position: fixed;
		width: 100%;
		height: 5px;
		left: 0;
		background: var(--accent2);

		animation: grow-progress linear;
		animation-timeline: scroll();
	}

	.daily-nav {
		margin: var(--space-l) 0;
	}

	.nav-links {
		display: flex;
		justify-content: space-between;
		width: 100%;
	}

	.nav-link {
		display: inline-block;
		padding: var(--space-xxs) var(--space-xs);
		border: 1px solid var(--gray);
		border-radius: 4px;
		color: var(--color);
		font-size: 0.9rem;
		text-decoration: none !important;
		transition: all 0.2s ease;
	}

	.nav-link:hover {
		border-color: var(--accent2);
		color: var(--accent2);
	}

	.nav-link.prev {
		margin-right: auto;
	}

	.nav-link.next {
		margin-left: auto;
	}
</style>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		// プログレスバーのaria-valuenow更新
		const progressBar = document.getElementById("progress");
		if (progressBar) {
			window.addEventListener(
				"scroll",
				() => {
					const scrollTop = window.scrollY;
					const docHeight = document.documentElement.scrollHeight - window.innerHeight;
					const scrollPercent = Math.round((scrollTop / docHeight) * 100);
					progressBar.setAttribute("aria-valuenow", scrollPercent.toString());
				},
				{ passive: true }
			);
		}
	});
</script>
